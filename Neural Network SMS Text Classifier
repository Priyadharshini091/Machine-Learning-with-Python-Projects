!pip install numpy pandas tensorflow scikit-learn
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Input
from tensorflow.keras.optimizers import Adam

# Load the dataset (replace with your dataset path)
data = pd.read_csv(r'C:\Users\admin\Downloads\data1\spam1\spam', encoding='latin-1')

# Clean the data (remove unnecessary columns)
data = data[['v1', 'v2']]
data.columns = ['label', 'message']

# Encode labels (0 = ham, 1 = spam)
label_encoder = LabelEncoder()
data['label'] = label_encoder.fit_transform(data['label'])

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    data['message'], data['label'], test_size=0.2, random_state=42
)

# Convert text to TF-IDF features
vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train).toarray()
X_test_tfidf = vectorizer.transform(X_test).toarray()

# Build Neural Network Model
model = Sequential([
    Input(shape=(X_train_tfidf.shape[1],)),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train_tfidf, y_train, epochs=10, batch_size=32, validation_data=(X_test_tfidf, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test_tfidf, y_test)
print(f"\nTest Accuracy: {accuracy * 100:.2f}%")

# Function to predict new SMS messages
def predict_sms(text):
    input_tfidf = vectorizer.transform([text]).toarray()
    prediction = model.predict(input_tfidf)[0][0]
    if prediction > 0.5:
        return "Spam"
    else:
        return "Ham"

# Example Prediction
new_sms = "Congratulations! You've won a free gift. Click here to claim now!"
result = predict_sms(new_sms)
print(f"\nMessage: {new_sms}\nPrediction: {result}")
